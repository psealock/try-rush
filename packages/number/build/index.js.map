{"version":3,"sources":["/Users/paulsealock/vagrant-local/www/tangaroa/public_html/wp-content/plugins/woocommerce-admin/packages/number/src/index.js"],"names":["numberFormatter","require","numberFormat","precision","decimalSeparator","thousandSeparator","number","parseFloat","isNaN","parsedPrecision","parseInt","decimals","toString","split","length","formatValue","numberConfig","type","value","Number","isFinite","Math","round","calculateDelta","primaryValue","secondaryValue"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAE,mCAAF,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASC,YAAT,CACN;AAAEC,EAAAA,SAAS,GAAG,IAAd;AAAoBC,EAAAA,gBAAgB,GAAG,GAAvC;AAA4CC,EAAAA,iBAAiB,GAAG;AAAhE,CADM,EAENC,MAFM,EAGL;AACD,MAAK,OAAOA,MAAP,KAAkB,QAAvB,EAAkC;AACjCA,IAAAA,MAAM,GAAGC,UAAU,CAAED,MAAF,CAAnB;AACA;;AAED,MAAKE,KAAK,CAAEF,MAAF,CAAV,EAAuB;AACtB,WAAO,EAAP;AACA;;AAED,MAAIG,eAAe,GAAGC,QAAQ,CAAEP,SAAF,EAAa,EAAb,CAA9B;;AAEA,MAAKK,KAAK,CAAEC,eAAF,CAAV,EAAgC;AAC/B,UAAM,GAAIE,QAAJ,IAAiBL,MAAM,CAACM,QAAP,GAAkBC,KAAlB,CAAyB,GAAzB,CAAvB;AACAJ,IAAAA,eAAe,GAAGE,QAAQ,GAAGA,QAAQ,CAACG,MAAZ,GAAqB,CAA/C;AACA;;AAED,SAAOd,eAAe,CACrBM,MADqB,EAErBG,eAFqB,EAGrBL,gBAHqB,EAIrBC,iBAJqB,CAAtB;AAMA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,WAAT,CAAsBC,YAAtB,EAAoCC,IAApC,EAA0CC,KAA1C,EAAkD;AACxD,MAAK,CAAEC,MAAM,CAACC,QAAP,CAAiBF,KAAjB,CAAP,EAAkC;AACjC,WAAO,IAAP;AACA;;AAED,UAASD,IAAT;AACC,SAAK,SAAL;AACC,aAAOI,IAAI,CAACC,KAAL,CAAYJ,KAAZ,CAAP;;AACD,SAAK,QAAL;AACC,aAAOhB,YAAY,CAAE,EAAE,GAAGc,YAAL;AAAmBb,QAAAA,SAAS,EAAE;AAA9B,OAAF,EAAwCe,KAAxC,CAAnB;AAJF;AAMA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,cAAT,CAAyBC,YAAzB,EAAuCC,cAAvC,EAAwD;AAC9D,MACC,CAAEN,MAAM,CAACC,QAAP,CAAiBI,YAAjB,CAAF,IACA,CAAEL,MAAM,CAACC,QAAP,CAAiBK,cAAjB,CAFH,EAGE;AACD,WAAO,IAAP;AACA;;AAED,MAAKA,cAAc,KAAK,CAAxB,EAA4B;AAC3B,WAAO,CAAP;AACA;;AAED,SAAOJ,IAAI,CAACC,KAAL,CACJ,CAAEE,YAAY,GAAGC,cAAjB,IAAoCA,cAAtC,GAAyD,GADnD,CAAP;AAGA","sourcesContent":["const numberFormatter = require( 'locutus/php/strings/number_format' );\n\n/**\n * Formats a number using site's current locale\n *\n * @see http://locutus.io/php/strings/number_format/\n * @param {Object} numberConfig number formatting configuration object.\n * @param {number} numberConfig.precision\n * @param {string} numberConfig.decimalSeparator\n * @param {string} numberConfig.thousandSeparator\n * @param {number|string} number number to format\n * @return {?string} A formatted string.\n */\nexport function numberFormat(\n\t{ precision = null, decimalSeparator = '.', thousandSeparator = ',' },\n\tnumber\n) {\n\tif ( typeof number !== 'number' ) {\n\t\tnumber = parseFloat( number );\n\t}\n\n\tif ( isNaN( number ) ) {\n\t\treturn '';\n\t}\n\n\tlet parsedPrecision = parseInt( precision, 10 );\n\n\tif ( isNaN( parsedPrecision ) ) {\n\t\tconst [ , decimals ] = number.toString().split( '.' );\n\t\tparsedPrecision = decimals ? decimals.length : 0;\n\t}\n\n\treturn numberFormatter(\n\t\tnumber,\n\t\tparsedPrecision,\n\t\tdecimalSeparator,\n\t\tthousandSeparator\n\t);\n}\n\n/**\n * Formats a number string based on type of `average` or `number`.\n *\n * @param {Object} numberConfig number formatting configuration object.\n * @param {string} type of number to format, average or number\n * @param {number} value to format.\n * @return {?string} A formatted string.\n */\nexport function formatValue( numberConfig, type, value ) {\n\tif ( ! Number.isFinite( value ) ) {\n\t\treturn null;\n\t}\n\n\tswitch ( type ) {\n\t\tcase 'average':\n\t\t\treturn Math.round( value );\n\t\tcase 'number':\n\t\t\treturn numberFormat( { ...numberConfig, precision: null }, value );\n\t}\n}\n\n/**\n * Calculates the delta/percentage change between two numbers.\n *\n * @param {number} primaryValue the value to calculate change for.\n * @param {number} secondaryValue the baseline which to calculdate the change against.\n * @return {?number} Percent change between the primaryValue from the secondaryValue.\n */\nexport function calculateDelta( primaryValue, secondaryValue ) {\n\tif (\n\t\t! Number.isFinite( primaryValue ) ||\n\t\t! Number.isFinite( secondaryValue )\n\t) {\n\t\treturn null;\n\t}\n\n\tif ( secondaryValue === 0 ) {\n\t\treturn 0;\n\t}\n\n\treturn Math.round(\n\t\t( ( primaryValue - secondaryValue ) / secondaryValue ) * 100\n\t);\n}\n"]}